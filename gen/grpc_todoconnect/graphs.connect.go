// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: graphs.proto

package grpc_todoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	grpc_todo "example.com/grpc-todo"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GraphServiceName is the fully-qualified name of the GraphService service.
	GraphServiceName = "graphs.GraphService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GraphServiceGetBySymbolProcedure is the fully-qualified name of the GraphService's GetBySymbol
	// RPC.
	GraphServiceGetBySymbolProcedure = "/graphs.GraphService/GetBySymbol"
	// GraphServiceGetBySymbolStreamProcedure is the fully-qualified name of the GraphService's
	// GetBySymbolStream RPC.
	GraphServiceGetBySymbolStreamProcedure = "/graphs.GraphService/GetBySymbolStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	graphServiceServiceDescriptor                 = grpc_todo.File_graphs_proto.Services().ByName("GraphService")
	graphServiceGetBySymbolMethodDescriptor       = graphServiceServiceDescriptor.Methods().ByName("GetBySymbol")
	graphServiceGetBySymbolStreamMethodDescriptor = graphServiceServiceDescriptor.Methods().ByName("GetBySymbolStream")
)

// GraphServiceClient is a client for the graphs.GraphService service.
type GraphServiceClient interface {
	GetBySymbol(context.Context, *connect.Request[grpc_todo.Symbol]) (*connect.Response[grpc_todo.Candles], error)
	GetBySymbolStream(context.Context, *connect.Request[grpc_todo.Symbol]) (*connect.ServerStreamForClient[grpc_todo.Candle], error)
}

// NewGraphServiceClient constructs a client for the graphs.GraphService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGraphServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GraphServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &graphServiceClient{
		getBySymbol: connect.NewClient[grpc_todo.Symbol, grpc_todo.Candles](
			httpClient,
			baseURL+GraphServiceGetBySymbolProcedure,
			connect.WithSchema(graphServiceGetBySymbolMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBySymbolStream: connect.NewClient[grpc_todo.Symbol, grpc_todo.Candle](
			httpClient,
			baseURL+GraphServiceGetBySymbolStreamProcedure,
			connect.WithSchema(graphServiceGetBySymbolStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// graphServiceClient implements GraphServiceClient.
type graphServiceClient struct {
	getBySymbol       *connect.Client[grpc_todo.Symbol, grpc_todo.Candles]
	getBySymbolStream *connect.Client[grpc_todo.Symbol, grpc_todo.Candle]
}

// GetBySymbol calls graphs.GraphService.GetBySymbol.
func (c *graphServiceClient) GetBySymbol(ctx context.Context, req *connect.Request[grpc_todo.Symbol]) (*connect.Response[grpc_todo.Candles], error) {
	return c.getBySymbol.CallUnary(ctx, req)
}

// GetBySymbolStream calls graphs.GraphService.GetBySymbolStream.
func (c *graphServiceClient) GetBySymbolStream(ctx context.Context, req *connect.Request[grpc_todo.Symbol]) (*connect.ServerStreamForClient[grpc_todo.Candle], error) {
	return c.getBySymbolStream.CallServerStream(ctx, req)
}

// GraphServiceHandler is an implementation of the graphs.GraphService service.
type GraphServiceHandler interface {
	GetBySymbol(context.Context, *connect.Request[grpc_todo.Symbol]) (*connect.Response[grpc_todo.Candles], error)
	GetBySymbolStream(context.Context, *connect.Request[grpc_todo.Symbol], *connect.ServerStream[grpc_todo.Candle]) error
}

// NewGraphServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGraphServiceHandler(svc GraphServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	graphServiceGetBySymbolHandler := connect.NewUnaryHandler(
		GraphServiceGetBySymbolProcedure,
		svc.GetBySymbol,
		connect.WithSchema(graphServiceGetBySymbolMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphServiceGetBySymbolStreamHandler := connect.NewServerStreamHandler(
		GraphServiceGetBySymbolStreamProcedure,
		svc.GetBySymbolStream,
		connect.WithSchema(graphServiceGetBySymbolStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/graphs.GraphService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GraphServiceGetBySymbolProcedure:
			graphServiceGetBySymbolHandler.ServeHTTP(w, r)
		case GraphServiceGetBySymbolStreamProcedure:
			graphServiceGetBySymbolStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGraphServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGraphServiceHandler struct{}

func (UnimplementedGraphServiceHandler) GetBySymbol(context.Context, *connect.Request[grpc_todo.Symbol]) (*connect.Response[grpc_todo.Candles], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphs.GraphService.GetBySymbol is not implemented"))
}

func (UnimplementedGraphServiceHandler) GetBySymbolStream(context.Context, *connect.Request[grpc_todo.Symbol], *connect.ServerStream[grpc_todo.Candle]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("graphs.GraphService.GetBySymbolStream is not implemented"))
}
