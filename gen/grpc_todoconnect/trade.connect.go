// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: trade.proto

package grpc_todoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	grpc_todo "example.com/grpc-todo"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TradeServiceName is the fully-qualified name of the TradeService service.
	TradeServiceName = "trade.TradeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TradeServicePutProcedure is the fully-qualified name of the TradeService's Put RPC.
	TradeServicePutProcedure = "/trade.TradeService/Put"
	// TradeServiceCallProcedure is the fully-qualified name of the TradeService's Call RPC.
	TradeServiceCallProcedure = "/trade.TradeService/Call"
	// TradeServiceTakeProfitProcedure is the fully-qualified name of the TradeService's TakeProfit RPC.
	TradeServiceTakeProfitProcedure = "/trade.TradeService/TakeProfit"
	// TradeServiceStopLoseProcedure is the fully-qualified name of the TradeService's StopLose RPC.
	TradeServiceStopLoseProcedure = "/trade.TradeService/StopLose"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tradeServiceServiceDescriptor          = grpc_todo.File_trade_proto.Services().ByName("TradeService")
	tradeServicePutMethodDescriptor        = tradeServiceServiceDescriptor.Methods().ByName("Put")
	tradeServiceCallMethodDescriptor       = tradeServiceServiceDescriptor.Methods().ByName("Call")
	tradeServiceTakeProfitMethodDescriptor = tradeServiceServiceDescriptor.Methods().ByName("TakeProfit")
	tradeServiceStopLoseMethodDescriptor   = tradeServiceServiceDescriptor.Methods().ByName("StopLose")
)

// TradeServiceClient is a client for the trade.TradeService service.
type TradeServiceClient interface {
	Put(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error)
	Call(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error)
	TakeProfit(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error)
	StopLose(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error)
}

// NewTradeServiceClient constructs a client for the trade.TradeService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTradeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TradeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tradeServiceClient{
		put: connect.NewClient[grpc_todo.Trade, grpc_todo.Empty](
			httpClient,
			baseURL+TradeServicePutProcedure,
			connect.WithSchema(tradeServicePutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		call: connect.NewClient[grpc_todo.Trade, grpc_todo.Empty](
			httpClient,
			baseURL+TradeServiceCallProcedure,
			connect.WithSchema(tradeServiceCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		takeProfit: connect.NewClient[grpc_todo.Trade, grpc_todo.Empty](
			httpClient,
			baseURL+TradeServiceTakeProfitProcedure,
			connect.WithSchema(tradeServiceTakeProfitMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopLose: connect.NewClient[grpc_todo.Trade, grpc_todo.Empty](
			httpClient,
			baseURL+TradeServiceStopLoseProcedure,
			connect.WithSchema(tradeServiceStopLoseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tradeServiceClient implements TradeServiceClient.
type tradeServiceClient struct {
	put        *connect.Client[grpc_todo.Trade, grpc_todo.Empty]
	call       *connect.Client[grpc_todo.Trade, grpc_todo.Empty]
	takeProfit *connect.Client[grpc_todo.Trade, grpc_todo.Empty]
	stopLose   *connect.Client[grpc_todo.Trade, grpc_todo.Empty]
}

// Put calls trade.TradeService.Put.
func (c *tradeServiceClient) Put(ctx context.Context, req *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error) {
	return c.put.CallUnary(ctx, req)
}

// Call calls trade.TradeService.Call.
func (c *tradeServiceClient) Call(ctx context.Context, req *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error) {
	return c.call.CallUnary(ctx, req)
}

// TakeProfit calls trade.TradeService.TakeProfit.
func (c *tradeServiceClient) TakeProfit(ctx context.Context, req *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error) {
	return c.takeProfit.CallUnary(ctx, req)
}

// StopLose calls trade.TradeService.StopLose.
func (c *tradeServiceClient) StopLose(ctx context.Context, req *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error) {
	return c.stopLose.CallUnary(ctx, req)
}

// TradeServiceHandler is an implementation of the trade.TradeService service.
type TradeServiceHandler interface {
	Put(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error)
	Call(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error)
	TakeProfit(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error)
	StopLose(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error)
}

// NewTradeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTradeServiceHandler(svc TradeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tradeServicePutHandler := connect.NewUnaryHandler(
		TradeServicePutProcedure,
		svc.Put,
		connect.WithSchema(tradeServicePutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tradeServiceCallHandler := connect.NewUnaryHandler(
		TradeServiceCallProcedure,
		svc.Call,
		connect.WithSchema(tradeServiceCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tradeServiceTakeProfitHandler := connect.NewUnaryHandler(
		TradeServiceTakeProfitProcedure,
		svc.TakeProfit,
		connect.WithSchema(tradeServiceTakeProfitMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tradeServiceStopLoseHandler := connect.NewUnaryHandler(
		TradeServiceStopLoseProcedure,
		svc.StopLose,
		connect.WithSchema(tradeServiceStopLoseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/trade.TradeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TradeServicePutProcedure:
			tradeServicePutHandler.ServeHTTP(w, r)
		case TradeServiceCallProcedure:
			tradeServiceCallHandler.ServeHTTP(w, r)
		case TradeServiceTakeProfitProcedure:
			tradeServiceTakeProfitHandler.ServeHTTP(w, r)
		case TradeServiceStopLoseProcedure:
			tradeServiceStopLoseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTradeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTradeServiceHandler struct{}

func (UnimplementedTradeServiceHandler) Put(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trade.TradeService.Put is not implemented"))
}

func (UnimplementedTradeServiceHandler) Call(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trade.TradeService.Call is not implemented"))
}

func (UnimplementedTradeServiceHandler) TakeProfit(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trade.TradeService.TakeProfit is not implemented"))
}

func (UnimplementedTradeServiceHandler) StopLose(context.Context, *connect.Request[grpc_todo.Trade]) (*connect.Response[grpc_todo.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("trade.TradeService.StopLose is not implemented"))
}
