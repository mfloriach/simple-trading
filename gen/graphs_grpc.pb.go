// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: graphs.proto

package grpc_todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GraphService_GetBySymbol_FullMethodName       = "/graphs.GraphService/GetBySymbol"
	GraphService_GetBySymbolStream_FullMethodName = "/graphs.GraphService/GetBySymbolStream"
)

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphServiceClient interface {
	GetBySymbol(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*Candles, error)
	GetBySymbolStream(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (GraphService_GetBySymbolStreamClient, error)
}

type graphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphServiceClient(cc grpc.ClientConnInterface) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) GetBySymbol(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*Candles, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Candles)
	err := c.cc.Invoke(ctx, GraphService_GetBySymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetBySymbolStream(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (GraphService_GetBySymbolStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GraphService_ServiceDesc.Streams[0], GraphService_GetBySymbolStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &graphServiceGetBySymbolStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphService_GetBySymbolStreamClient interface {
	Recv() (*Candle, error)
	grpc.ClientStream
}

type graphServiceGetBySymbolStreamClient struct {
	grpc.ClientStream
}

func (x *graphServiceGetBySymbolStreamClient) Recv() (*Candle, error) {
	m := new(Candle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GraphServiceServer is the server API for GraphService service.
// All implementations must embed UnimplementedGraphServiceServer
// for forward compatibility
type GraphServiceServer interface {
	GetBySymbol(context.Context, *Symbol) (*Candles, error)
	GetBySymbolStream(*Symbol, GraphService_GetBySymbolStreamServer) error
	mustEmbedUnimplementedGraphServiceServer()
}

// UnimplementedGraphServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGraphServiceServer struct {
}

func (UnimplementedGraphServiceServer) GetBySymbol(context.Context, *Symbol) (*Candles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySymbol not implemented")
}
func (UnimplementedGraphServiceServer) GetBySymbolStream(*Symbol, GraphService_GetBySymbolStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBySymbolStream not implemented")
}
func (UnimplementedGraphServiceServer) mustEmbedUnimplementedGraphServiceServer() {}

// UnsafeGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphServiceServer will
// result in compilation errors.
type UnsafeGraphServiceServer interface {
	mustEmbedUnimplementedGraphServiceServer()
}

func RegisterGraphServiceServer(s grpc.ServiceRegistrar, srv GraphServiceServer) {
	s.RegisterService(&GraphService_ServiceDesc, srv)
}

func _GraphService_GetBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Symbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetBySymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetBySymbol(ctx, req.(*Symbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetBySymbolStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Symbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServiceServer).GetBySymbolStream(m, &graphServiceGetBySymbolStreamServer{ServerStream: stream})
}

type GraphService_GetBySymbolStreamServer interface {
	Send(*Candle) error
	grpc.ServerStream
}

type graphServiceGetBySymbolStreamServer struct {
	grpc.ServerStream
}

func (x *graphServiceGetBySymbolStreamServer) Send(m *Candle) error {
	return x.ServerStream.SendMsg(m)
}

// GraphService_ServiceDesc is the grpc.ServiceDesc for GraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graphs.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBySymbol",
			Handler:    _GraphService_GetBySymbol_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBySymbolStream",
			Handler:       _GraphService_GetBySymbolStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "graphs.proto",
}
